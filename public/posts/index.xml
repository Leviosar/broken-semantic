<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Broken Semantics</title>
        <link>http://localhost:1313/posts/</link>
        <description>Recent content in Posts on Broken Semantics</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <lastBuildDate>Sat, 04 May 2024 16:14:42 -0300</lastBuildDate><atom:link href="http://localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Another oppinionated API building guide</title>
        <link>http://localhost:1313/posts/api-guide/</link>
        <pubDate>Sat, 04 May 2024 16:14:42 -0300</pubDate>
        
        <guid>http://localhost:1313/posts/api-guide/</guid>
        <description>&lt;h1 id=&#34;escrevendo-apis-de-forma-organizada&#34;&gt;Escrevendo APIs de forma organizada
&lt;/h1&gt;&lt;p&gt;Uma parte significativa do trabalho de uma pessoa programadora que trabalhe com a web é escrever ou consumir APIs. Consumir costuma ser simples, você lê a documentação, gera suas credenciais, planeja quais recursos precisa consumir e implementar a integração na sua aplicação alvo (ok, talvez não tão simples assim). No pior dos casos você vai acabar com uma implementação um pouco confusa mas que ainda assim provavelmente irá funcionar e fazer o trabalho a que se propõe.&lt;/p&gt;
&lt;p&gt;Escrever, por outro lado, é uma tarefa muito mais complexa e envolve habilidades que muitas vezes ultrapassam o conhecimento técnico mais comum. Claro, isso se você quiser escrever uma &lt;em&gt;boa&lt;/em&gt; API. Mas quais são exatamente os parâmetros que podemos usar para classificar uma API como &lt;em&gt;boa&lt;/em&gt;? Se você perguntar isso para 10 pessoas talvez você receba 10 respostas ligeiramente diferentes, mas acredito que a maior delas irá gravitar em torno de alguns princípios básicos que muitas vezes são conhecidos mas não são priorizados.&lt;/p&gt;
&lt;p&gt;Esse artigo se divide em duas partes, iniciando com uma discussão teórica sobre pontos destacáveis que podem contribuir para a qualidade geral de uma API, seguido de um exemplo prático de estruturação de uma API REST&lt;/p&gt;
&lt;h3 id=&#34;compreensibilidade&#34;&gt;Compreensibilidade
&lt;/h3&gt;&lt;p&gt;Como o acrônimo sugere, uma API é uma interface entre sua aplicação e o mundo exterior, e toda interface para ser útil precisa ser compreensível, esse é o primeiro desafio de escrever uma API: outras pessoas precisam ser capazes de extrair informação sem precisar te consultar sobre a estrutura toda da API.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Another oppinionated API building guide</title>
        <link>http://localhost:1313/posts/welcome/</link>
        <pubDate>Sat, 04 May 2024 13:52:19 -0300</pubDate>
        
        <guid>http://localhost:1313/posts/welcome/</guid>
        <description>&lt;p&gt;Welcome, welcome to a mad man&amp;rsquo;s extravaganza&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
